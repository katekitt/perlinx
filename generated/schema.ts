// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class deposit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save deposit entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save deposit entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("deposit", id.toString(), this);
  }

  static load(id: string): deposit | null {
    return store.get("deposit", id) as deposit | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get collateralAmount(): BigInt {
    let value = this.get("collateralAmount");
    return value.toBigInt();
  }

  set collateralAmount(value: BigInt) {
    this.set("collateralAmount", Value.fromBigInt(value));
  }

  get sponsor(): string {
    let value = this.get("sponsor");
    return value.toString();
  }

  set sponsor(value: string) {
    this.set("sponsor", Value.fromString(value));
  }

  get depositTimestanp(): BigInt {
    let value = this.get("depositTimestanp");
    return value.toBigInt();
  }

  set depositTimestanp(value: BigInt) {
    this.set("depositTimestanp", Value.fromBigInt(value));
  }
}

export class withdrawal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save withdrawal entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save withdrawal entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("withdrawal", id.toString(), this);
  }

  static load(id: string): withdrawal | null {
    return store.get("withdrawal", id) as withdrawal | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get collateralAmount(): BigInt {
    let value = this.get("collateralAmount");
    return value.toBigInt();
  }

  set collateralAmount(value: BigInt) {
    this.set("collateralAmount", Value.fromBigInt(value));
  }

  get sponsor(): string {
    let value = this.get("sponsor");
    return value.toString();
  }

  set sponsor(value: string) {
    this.set("sponsor", Value.fromString(value));
  }

  get withdrawlTimestamp(): BigInt {
    let value = this.get("withdrawlTimestamp");
    return value.toBigInt();
  }

  set withdrawlTimestamp(value: BigInt) {
    this.set("withdrawlTimestamp", Value.fromBigInt(value));
  }
}

export class redeem extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save redeem entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save redeem entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("redeem", id.toString(), this);
  }

  static load(id: string): redeem | null {
    return store.get("redeem", id) as redeem | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get collateralAmount(): BigInt {
    let value = this.get("collateralAmount");
    return value.toBigInt();
  }

  set collateralAmount(value: BigInt) {
    this.set("collateralAmount", Value.fromBigInt(value));
  }

  get tokenAmount(): BigInt {
    let value = this.get("tokenAmount");
    return value.toBigInt();
  }

  set tokenAmount(value: BigInt) {
    this.set("tokenAmount", Value.fromBigInt(value));
  }

  get sponsor(): string {
    let value = this.get("sponsor");
    return value.toString();
  }

  set sponsor(value: string) {
    this.set("sponsor", Value.fromString(value));
  }

  get redeemTimestamp(): BigInt {
    let value = this.get("redeemTimestamp");
    return value.toBigInt();
  }

  set redeemTimestamp(value: BigInt) {
    this.set("redeemTimestamp", Value.fromBigInt(value));
  }
}

export class liquidation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save liquidation entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save liquidation entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("liquidation", id.toString(), this);
  }

  static load(id: string): liquidation | null {
    return store.get("liquidation", id) as liquidation | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get liquidatedCollateral(): BigInt {
    let value = this.get("liquidatedCollateral");
    return value.toBigInt();
  }

  set liquidatedCollateral(value: BigInt) {
    this.set("liquidatedCollateral", Value.fromBigInt(value));
  }

  get liquidationId(): BigInt {
    let value = this.get("liquidationId");
    return value.toBigInt();
  }

  set liquidationId(value: BigInt) {
    this.set("liquidationId", Value.fromBigInt(value));
  }

  get liquidationTime(): BigInt {
    let value = this.get("liquidationTime");
    return value.toBigInt();
  }

  set liquidationTime(value: BigInt) {
    this.set("liquidationTime", Value.fromBigInt(value));
  }

  get liquidator(): string {
    let value = this.get("liquidator");
    return value.toString();
  }

  set liquidator(value: string) {
    this.set("liquidator", Value.fromString(value));
  }

  get sponsor(): string {
    let value = this.get("sponsor");
    return value.toString();
  }

  set sponsor(value: string) {
    this.set("sponsor", Value.fromString(value));
  }

  get lockedCollateral(): BigInt {
    let value = this.get("lockedCollateral");
    return value.toBigInt();
  }

  set lockedCollateral(value: BigInt) {
    this.set("lockedCollateral", Value.fromBigInt(value));
  }

  get tokensOutstanding(): BigInt {
    let value = this.get("tokensOutstanding");
    return value.toBigInt();
  }

  set tokensOutstanding(value: BigInt) {
    this.set("tokensOutstanding", Value.fromBigInt(value));
  }
}

export class platformStatus extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save platformStatus entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save platformStatus entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("platformStatus", id.toString(), this);
  }

  static load(id: string): platformStatus | null {
    return store.get("platformStatus", id) as platformStatus | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sponsorsQuantity(): BigInt {
    let value = this.get("sponsorsQuantity");
    return value.toBigInt();
  }

  set sponsorsQuantity(value: BigInt) {
    this.set("sponsorsQuantity", Value.fromBigInt(value));
  }

  get depositsQuantity(): BigInt {
    let value = this.get("depositsQuantity");
    return value.toBigInt();
  }

  set depositsQuantity(value: BigInt) {
    this.set("depositsQuantity", Value.fromBigInt(value));
  }

  get withdrawlsQuantity(): BigInt {
    let value = this.get("withdrawlsQuantity");
    return value.toBigInt();
  }

  set withdrawlsQuantity(value: BigInt) {
    this.set("withdrawlsQuantity", Value.fromBigInt(value));
  }

  get liquidationsQuantity(): BigInt {
    let value = this.get("liquidationsQuantity");
    return value.toBigInt();
  }

  set liquidationsQuantity(value: BigInt) {
    this.set("liquidationsQuantity", Value.fromBigInt(value));
  }

  get positionsQuantity(): BigInt {
    let value = this.get("positionsQuantity");
    return value.toBigInt();
  }

  set positionsQuantity(value: BigInt) {
    this.set("positionsQuantity", Value.fromBigInt(value));
  }

  get feesPaid(): BigInt {
    let value = this.get("feesPaid");
    return value.toBigInt();
  }

  set feesPaid(value: BigInt) {
    this.set("feesPaid", Value.fromBigInt(value));
  }

  get collateralInPositionsAmount(): BigInt {
    let value = this.get("collateralInPositionsAmount");
    return value.toBigInt();
  }

  set collateralInPositionsAmount(value: BigInt) {
    this.set("collateralInPositionsAmount", Value.fromBigInt(value));
  }

  get tokensInPositionsAmount(): BigInt {
    let value = this.get("tokensInPositionsAmount");
    return value.toBigInt();
  }

  set tokensInPositionsAmount(value: BigInt) {
    this.set("tokensInPositionsAmount", Value.fromBigInt(value));
  }

  get redeemsQuantity(): BigInt {
    let value = this.get("redeemsQuantity");
    return value.toBigInt();
  }

  set redeemsQuantity(value: BigInt) {
    this.set("redeemsQuantity", Value.fromBigInt(value));
  }
}

export class sponsor extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save sponsor entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save sponsor entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("sponsor", id.toString(), this);
  }

  static load(id: string): sponsor | null {
    return store.get("sponsor", id) as sponsor | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hasPosition(): boolean {
    let value = this.get("hasPosition");
    return value.toBoolean();
  }

  set hasPosition(value: boolean) {
    this.set("hasPosition", Value.fromBoolean(value));
  }

  get collateralInPositionAmount(): BigInt {
    let value = this.get("collateralInPositionAmount");
    return value.toBigInt();
  }

  set collateralInPositionAmount(value: BigInt) {
    this.set("collateralInPositionAmount", Value.fromBigInt(value));
  }

  get tokenInPositionAmount(): BigInt {
    let value = this.get("tokenInPositionAmount");
    return value.toBigInt();
  }

  set tokenInPositionAmount(value: BigInt) {
    this.set("tokenInPositionAmount", Value.fromBigInt(value));
  }

  get liquidations(): Array<string> {
    let value = this.get("liquidations");
    return value.toStringArray();
  }

  set liquidations(value: Array<string>) {
    this.set("liquidations", Value.fromStringArray(value));
  }

  get performedLiquidations(): Array<string> {
    let value = this.get("performedLiquidations");
    return value.toStringArray();
  }

  set performedLiquidations(value: Array<string>) {
    this.set("performedLiquidations", Value.fromStringArray(value));
  }

  get deposits(): Array<string> {
    let value = this.get("deposits");
    return value.toStringArray();
  }

  set deposits(value: Array<string>) {
    this.set("deposits", Value.fromStringArray(value));
  }

  get withdrawals(): Array<string> {
    let value = this.get("withdrawals");
    return value.toStringArray();
  }

  set withdrawals(value: Array<string>) {
    this.set("withdrawals", Value.fromStringArray(value));
  }

  get redeems(): Array<string> {
    let value = this.get("redeems");
    return value.toStringArray();
  }

  set redeems(value: Array<string>) {
    this.set("redeems", Value.fromStringArray(value));
  }
}
